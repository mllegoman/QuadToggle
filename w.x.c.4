#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>

Display *dis;
int screen;
Window win;
GC gc;

XEvent event;
KeySym key;
char text[255];

unsigned long HEX(char v[8]) {
int r, g, b;
r = 16*(v[1] - 48 - (((v[1] - 48)>>4)*7)) + v[2] - 48 - (((v[2] - 48)>>4)*7);
g = 16*(v[3] - 48 - (((v[3] - 48)>>4)*7)) + v[4] - 48 - (((v[4] - 48)>>4)*7);
b = 16*(v[5] - 48 - (((v[5] - 48)>>4)*7)) + v[6] - 48 - (((v[6] - 48)>>4)*7);
return b + (g<<8) + (r<<16);
}

unsigned long LHEX(char v[8]) {
int r, g, b;
r = 16*(v[1] - 48 - (((v[1] - 48)>>5)*39)) + v[2] - 48 - (((v[2] - 48)>>5)*39);
g = 16*(v[3] - 48 - (((v[3] - 48)>>5)*39)) + v[4] - 48 - (((v[4] - 48)>>5)*39);
b = 16*(v[5] - 48 - (((v[5] - 48)>>5)*39)) + v[6] - 48 - (((v[6] - 48)>>5)*39);
return b + (g<<8) + (r<<16);
}

unsigned long RGB(int r, int g, int b) {
return b + (g<<8) + (r<<16);
};

void init_x() {
	dis=XOpenDisplay((char *)0);
	screen=DefaultScreen(dis);

    XSetWindowAttributes *attributes;
    win=XCreateWindow(dis,DefaultRootWindow(dis), 0, 0, 1000, 500, 5, CopyFromParent, CopyFromParent, CopyFromParent, 0, attributes);
	XSetStandardProperties(dis,win,"Quadtoggle","DuoGrid",None,NULL,0,NULL);

	XSelectInput(dis, win, ExposureMask|ButtonPressMask|KeyPressMask);

    gc=XCreateGC(dis, win, 0,0);

    XSetBackground(dis,gc,RGB(0,0,0));
	XSetForeground(dis,gc,HEX("#000000"));

	XClearWindow(dis, win);
	XMapRaised(dis, win);
};

void close_x() {
    XFreeGC(dis, gc);
	XDestroyWindow(dis,win);
	XCloseDisplay(dis);
	exit(1);
};

void toggle() {

int con, off_x, off_y, i, j, s, width, height, type, startx, starty, endx, endy, x[2], y[2];
con = 1;
off_x = 0;
off_y = 0;

char suprand[1];
FILE *ftp;
ftp = fopen("/dev/urandom","r");
fgets(suprand, 1, ftp);

XSetForeground(dis,gc,HEX("#000000"));
XFillRectangle(dis,win,gc,0,0,1000,1000);

    while(1) { // first contact
    XNextEvent(dis, &event);
        if (event.type==ButtonPress) {
        width = event.xbutton.x;
        height = event.xbutton.y;
        break;
        }
    }

bool alpha[height+1][width+1], beta[height+1][width+1], b[height+1][width+1], c[height+1][width+1], d[19][19];

XSetForeground(dis,gc,HEX("#FFFFFF"));
XDrawRectangle(dis,win,gc,-1,-1,width+2,height-2);

    int std_redraw(bool k) {
         for (int i = 0; i < height-3; i++) {
              for (int j = 0; j < width+1; j++) {
                   if (k) {
                      XSetForeground(dis,gc,RGB(b[i][j]*255, b[i][j]*255, b[i][j]*255));
                      XFillRectangle(dis,win,gc,j*con-off_x,i*con-off_y,con,con);
                      } else {
                      XSetForeground(dis,gc,RGB(alpha[i][j]*255, alpha[i][j]*165, alpha[i][j]));
                      XFillRectangle(dis,win,gc,j*con-off_x,i*con-off_y,con,con);
                   }
              }
         }
	}

bool k = 1;
std_redraw(k);

	while(1) { // initializer
		XNextEvent(dis, &event);
		if (event.type==ButtonPress) {
		b[event.xbutton.y][event.xbutton.x] = 1;
		std_redraw(k);
		};
		if (event.type==KeyPress&&XLookupString(&event.xkey,text,255,&key,0)==1) {
			if (text[0]=='r') {
				while(1) {
				XNextEvent(dis, &event);
					if (event.type==ButtonPress) {
					startx = event.xbutton.x;
					starty = event.xbutton.y;
					break;
					};
				};
				while(1) {
                XNextEvent(dis, &event);
                    if (event.type==ButtonPress) {
                    endx = event.xbutton.x;
                    endy = event.xbutton.y;
				    break;
                    };
                };
                    if (startx<endx) {
                    x[0] = startx;
                    x[1] = endx;
                    } else {
                    x[0] = endx;
                    x[1] = startx;
                    }
                    if (starty<endy) {
                    y[0] = starty;
                    y[1] = endy;
                    } else {
                    y[0] = endy;
                    y[1] = starty;
                    }
                    for (i = y[0]; i < y[1]; i++) {
        		    	for (j = x[0]; j < x[1]; j++) {
        		    	b[i][j] = rand() % 3 % 2;
        		    	}
        	        }
                    for (i = 0; i < height-3; i++) {
                        for (j = 0; j < width+1; j++) {
                            if (b[i][j]) {
                                if(rand() % 2) {
                                alpha[i][j] = 1;
                                b[i][j] = 0;
                                }
                            }
                        }
                    }
				std_redraw(k);
			}
			if (text[0]=='p') {
                   while(1) {
                   XNextEvent(dis, &event);
                       if (event.type==ButtonPress) {
                       startx = event.xbutton.x;
                       starty = event.xbutton.y;
                       break;
                       }
                   }
                   for (i = 0; i < 19; i++) {
                      for (j = 0; j < 19; j++) {
                      b[starty+i][startx+j] = d[i][j];
                      }
                   }
                   std_redraw(k);
			}
			if (text[0]=='c') {
				for (i = 0; i < 19; i++) {
					for (j = 0; j < 19; j++) {
						d[i][j] = 0;
					}
				}
	    		XSetForeground(dis,gc,HEX("#000000"));
	    		XFillRectangle(dis,win,gc,0,0,1000,1000);
	    		XSetForeground(dis,gc,HEX("#FFFFFF"));
	    		XDrawRectangle(dis,win,gc,-1,-1,381,381);
				while(1) {
				XNextEvent(dis, &event);
					if (event.type==ButtonPress) {
						if (event.xbutton.x/20>19||event.xbutton.y/20>19) {
                        XSetForeground(dis,gc,HEX("#000000"));
                        XFillRectangle(dis,win,gc,0,0,1000,1000);
                        XSetForeground(dis,gc,HEX("#FFFFFF"));
                        XDrawRectangle(dis,win,gc,-1,-1,width+2,height-2);
						std_redraw(k);
						break;
						} else {
						d[event.xbutton.y/20][event.xbutton.x/20] = !d[event.xbutton.y/20][event.xbutton.x/20];
						XSetForeground(dis,gc,RGB(d[event.xbutton.y/20][event.xbutton.x/20]*255,d[event.xbutton.y/20][event.xbutton.x/20]*255,d[event.xbutton.y/20][event.xbutton.x/20]*255));
						XFillRectangle(dis,win,gc,event.xbutton.x/20*20,event.xbutton.y/20*20,20,20);
						};
					};
					if (event.type==KeyPress&&XLookupString(&event.xkey,text,255,&key,0)==1) {
						if (text[0]=='q') {
                        XSetForeground(dis,gc,HEX("#000000"));
                        XFillRectangle(dis,win,gc,0,0,1000,1000);
                        XSetForeground(dis,gc,HEX("#FFFFFF"));
                        XDrawRectangle(dis,win,gc,-1,-1,width+2,height-2);
						std_redraw(k);
						break;
						}
					}
				}
			}
			if (text[0]=='k') {
            k = !k;
            std_redraw(k);
            }
			if (text[0]=='y') {
			break;
			}
            if (text[0]=='q') {
            close_x();
            }
		}
	}

bool h = 0;
    while(1) { // main while
    h = !h;
        for (i = 2; i < height-3; i+=2) {
            for (j = 2; j < width+1; j+=2) {
            s = b[i-h][j-h]+b[i-h][j+!h]+b[i+!h][j-h]+b[i+!h][j+!h];
            c[i-h][j-h] = !(s-1)*(b[i+!h][j-h]) + b[i-h][j-h] - !(s-1)*b[i-h][j-h];
            c[i-h][j+!h] = !(s-1)*(b[i-h][j-h]) + b[i-h][j+!h] - !(s-1)*b[i-h][j+!h];
            c[i+!h][j-h] = !(s-1)*(b[i+!h][j+!h]) + b[i+!h][j-h] - !(s-1)*b[i+!h][j-h];
            c[i+!h][j+!h] = !(s-1)*(b[i-h][j+!h]) + b[i+!h][j+!h] - !(s-1)*b[i+!h][j+!h];
            s = alpha[i-!h][j-!h]+alpha[i-!h][j+h]+alpha[i+h][j-!h]+alpha[i+h][j+h];
            beta[i-!h][j-!h] = !(s-1)*(alpha[i+h][j-!h]) + alpha[i-!h][j-!h] - !(s-1)*alpha[i-!h][j-!h];
            beta[i-!h][j+h] = !(s-1)*(alpha[i-!h][j-!h]) + alpha[i-!h][j+h] - !(s-1)*alpha[i-!h][j+h];
            beta[i+h][j-!h] = !(s-1)*(alpha[i+h][j+h]) + alpha[i+h][j-!h] - !(s-1)*alpha[i+h][j-!h];
            beta[i+h][j+h] = !(s-1)*(alpha[i-!h][j+h]) + alpha[i+h][j+h] - !(s-1)*alpha[i+h][j+h];
                if (c[i-1][j-1]&beta[i-1][j-1] || c[i-1][j]&beta[i-1][j] || c[i][j-1]&beta[i][j-1] || c[i][j]&beta[i][j]) {
                c[i-h][j-h] = b[i+!h][j+!h];
                c[i-h][j+!h] = b[i+!h][j-h];
                c[i+!h][j-h] = b[i-h][j+!h];
                c[i+!h][j+!h] = b[i-h][j-h];
                }
            }
        }

    	for (i = 0; i < height-3; i++) {
            for (j = 0; j < width+1; j++) {
            b[i][j] = c[i][j];
            alpha[i][j] = beta[i][j];
            }
    	}

    std_redraw(k);

        while (XPending(dis)!=0) {
        XNextEvent(dis, &event);
            if (event.type==KeyPress&&XLookupString(&event.xkey,text,255,&key,0)==1) {
                if (text[0]=='q') {
                close_x();
                }
            }
            if (event.type==ButtonPress) {
            type = event.xbutton.button;
                if (type==1&&con!=10) {
                con++;
                XSetForeground(dis,gc,HEX("#000000"));
                XFillRectangle(dis, win, gc, 0, 0, 500, 500);
                off_x = off_x + event.xbutton.x;
                off_y = off_y + event.xbutton.y;
                }
                if (type==3&&con!=1) {
                con = con - 1;
                XSetForeground(dis,gc,HEX("#000000"));
                XFillRectangle(dis, win, gc, 0, 0, 1000, 1000);
                off_x = off_x * !!(con-1) / 2;
                off_y = off_y * !!(con-1) / 2;
                }
                if (type==4&&con!=1) {
                con = con - 1;
                XSetForeground(dis,gc,HEX("#000000"));
                XFillRectangle(dis, win, gc, 0, 0, 1000, 1000);
                off_x = 0;
                off_y = 0;
                }
                if (type==5&&con!=10) {
                con++;
                XSetForeground(dis,gc,HEX("#000000"));
                XFillRectangle(dis, win, gc, 0, 0, 1000, 1000);
                off_x = 0;
                off_y = 0;
                }
            }
            if (event.type==KeyPress&&XLookupString(&event.xkey,text,255,&key,0)==1) {
                if (text[0]=='k') {
                k = !k;
                }
            }
        }
    }
}

int main() {
init_x();
toggle();
close_x();
};

